<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="iunet.dao.UserDao">
	<!-- 根据login_name获取用户信息 -->
	<select id="queryUserByLoginName" resultType="iunet.model.um.User">
		select
		id,login_name,user_name,password,state,email,home_path,photo_path,quota_size,user_type,right_level,app_param
		from um_user where login_name=#{login_name,jdbcType=VARCHAR}
	</select>

	<!-- 根据email获取用户id -->
	<select id="queryUserIdByEmail" resultType="java.lang.Integer">
		select id from
		um_user where email=#{email,jdbcType=VARCHAR}
	</select>

	<!-- 获取用户email个数 -->
	<select id="queryUserByEmailCount" resultType="java.lang.Integer">
		select count(*) as
		RN from um_user where email=#{email,jdbcType=VARCHAR}
	</select>

	<!-- 获得用户所属分组id -->
	<select id="queryGroupIdsByUserId" resultType="java.lang.String">
		select group_id
		from um_usertogroup where user_id=#{id,jdbcType=INTEGER}
	</select>

	<!-- 获得用户所属角色id -->
	<select id="queryRoleIdsByUserId" resultType="java.lang.String">
		select role_id from
		um_usertorole where user_id=#{id,jdbcType=INTEGER}
	</select>

	<!-- 新建用户 -->
	<insert id="insertUser" parameterType="iunet.model.um.User">
		insert into um_user
		(id,login_name,user_name,password,email,state,create_time) values(
		#{id,jdbcType=INTEGER},
		#{login_name,jdbcType=VARCHAR},
		#{user_name,jdbcType=VARCHAR},
		#{password,jdbcType=VARCHAR},
		#{email,jdbcType=VARCHAR},
		#{state,jdbcType=INTEGER},
		#{create_time,jdbcType=TIMESTAMP}
		)
	</insert>

	<!-- 更新用户信息 -->
	<update id="updateUser" parameterType="iunet.model.um.User">
		update um_user
		<set>
			<if test="login_name != null">
				login_name=#{login_name,jdbcType=VARCHAR},
			</if>
			<if test="user_name != null">
				user_name=#{user_name,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				password=#{password,jdbcType=VARCHAR},
			</if>
			<if test="email != null">
				email=#{email,jdbcType=VARCHAR},
			</if>
			<if test="state != null">
				state=#{state,jdbcType=INTEGER},
			</if>
			<if test="update_time != null">
				update_time=#{update_time,jdbcType=TIMESTAMP},
			</if>
			<if test="app_param != null">
				app_param=#{app_param,jdbcType=VARCHAR}
			</if>
		</set>
		where id=#{id,jdbcType=INTEGER}
	</update>

	<!-- 添加登录日志 -->
	<insert id="insertLoginLog" parameterType="iunet.model.um.LoginLog">
		insert into
		um_LoginLog
		(id,user_id,login_name,login_time,logout_time,device_name,host_name,ip_address,state)
		values(
		#{id,jdbcType=VARCHAR},
		#{user_id,jdbcType=INTEGER},
		#{login_name,jdbcType=VARCHAR},
		#{login_time,jdbcType=TIMESTAMP},
		#{logout_time,jdbcType=TIMESTAMP},
		#{device_name,jdbcType=VARCHAR},
		#{host_name,jdbcType=VARCHAR},
		#{ip_address,jdbcType=VARCHAR},
		#{state,jdbcType=INTEGER}
		)
	</insert>

	<!-- 更新登出时间 -->
	<update id="updateLoginLog">
		update um_LoginLog set
		logout_time=#{logout_time,jdbcType=TIMESTAMP} where rownum=1 and
		user_id=#{user_id,jdbcType=INTEGER} order by login_time desc
	</update>

	<!-- 根据UUID 查询用户注册数据 -->
	<select id="queryActivationDataByUUID" resultType="java.lang.String">
		select data
		from um_activation where state=0 and uuid=#{uuid,jdbcType=VARCHAR}
	</select>
	
	<!-- 获取注册email个数 -->
	<select id="queryRegisterByEmailCount" resultType="java.lang.Integer">
		select count(*) as
		RN from um_activation where email=#{email,jdbcType=VARCHAR}
	</select>

	<!-- 插入用户注册数据 -->
	<insert id="insertActivationByUUID" parameterType="java.util.Map">
		insert into
		um_activation
		(uuid,email,state,data)
		values(
		#{uuid,jdbcType=VARCHAR},
		#{email,jdbcType=VARCHAR},
		#{state,jdbcType=INTEGER},
		#{data,jdbcType=VARCHAR}
		)
	</insert>

	<!-- 根据UUID 更新账户激活状态 -->
	<update id="updateActivationByUUID">
		update um_activation set
		state=1 where
		uuid=#{uuid,jdbcType=VARCHAR}
	</update>
</mapper>